#!/usr/bin/env bash

set -euo pipefail

color() {
    if [[ "${2:-}" == "last" ]]; then
        tput setaf 2
    elif [[ "${2:-}" == "error" ]]; then
        tput setaf 1
    else
        tput setaf "$1"
    fi
}

h_line() {
    color 4 "${1:-}"
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | sed 's/ /═/g'
    tput sgr0
}

banner() {
    if [[ "${2:-}" != "first" && "${2:-}" != "last" ]]; then echo; fi
    h_line "${2:-}"
    printf \
        '%*s' \
        "$(((${COLUMNS:-$(tput cols)} - ${#1}) / 2))" \
        ''
    color 6 "${2:-}"
    echo "$1"
    tput sgr0
    h_line "${2:-}"
    if [[ "${2:-}" != "last" && "${2:-}" != "error" ]]; then echo; fi
}

failure() {
    if [[ $? -ne 0 ]]; then
        banner "Failure" error
    fi
}

trap failure EXIT

banner "Versions" first
nix --version

echo -n "direnv "
direnv --version

nixpkgs-fmt --version 2>&1 | head -n1 || true

echo -n "shfmt "
shfmt -version

echo -n "shellcheck "
shellcheck --version | grep version: | cut -f2 -d' '

echo -n "markdownlint "
markdownlint --version

banner "Linting"
markdownlint .
nixpkgs-fmt --check flake.nix
shfmt -d -i 4 .
find . \
    -type f \
    -not -path './.git/*' \
    -exec file --mime-type {} \; |
    grep 'text/x-shellscript' |
    cut -d: -f1 |
    xargs shellcheck

REPO_ROOT="$(git rev-parse --show-toplevel)"
REPO_NAME="$(basename "$REPO_ROOT")"

crate_types=(
    lib
    bin
)

for t in "${crate_types[@]}"; do
    CRATE_NAME="$REPO_NAME-$t"

    banner "Running $t CI"

    pushd "$(mktemp -d --suffix ".$CRATE_NAME")" || exit

    # Generate this particular configuration
    cargo-generate generate \
        --init \
        --path "$REPO_ROOT" \
        --name "$CRATE_NAME" \
        --define "short_description=$CRATE_NAME CI project" \
        --define "use_default_licensing=true" \
        --"$t"

    # Test the init script
    ./bin/init
    if [[ -n "$(git status --short)" ]]; then
        # Assert that there's no uncommitted changes
        exit 1
    fi

    # Ensure the flake isn't broken
    nix build

    # Run the actual tests
    direnv exec . engage

    popd || exit
done

banner "Success" last
